{"version":3,"sources":["imgs/tapsco2-logo-w-glow.png","components/NavBar/NavBar.js","components/Home/Home.js","components/Services/Services.js","components/Equipment/Equipment.js","components/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","AppBar","className","Container","map","e","index","exact","activeClassName","to","link","Button","title","Home","Grid","item","xs","src","tapsLogo","alt","Typography","variant","Services","Equipment","Contact","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,iD,wUCK5B,SAASC,IAQpB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,UAAU,WACd,kBAACC,EAAA,EAAD,CAAWD,UAAU,gBAVhB,CACb,CAAE,MAAS,OAAQ,KAAQ,KAC3B,CAAE,MAAS,WAAY,KAAQ,aAC/B,CAAE,MAAS,YAAa,KAAQ,cAChC,CAAE,MAAS,aAAc,KAAQ,aAOXE,KAAI,SAACC,EAAGC,GAAJ,OACV,kBAAC,IAAD,CAASC,OAAK,EAACL,UAAU,UAAUM,gBAAgB,YAAYC,GAAIJ,EAAEK,MACjE,kBAACC,EAAA,EAAD,CAAQT,UAAU,aAAaG,EAAEO,c,2BCb9C,SAASC,IACpB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAId,UAAU,cACzB,yBAAKe,IAAKC,IAAUC,IAAI,kBAE5B,kBAAC,EAAD,MACA,kBAAChB,EAAA,EAAD,KACI,kBAACW,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAId,UAAU,WACzB,kBAACkB,EAAA,EAAD,CAAYC,QAAQ,MAApB,yBACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,mG,MCVL,SAASC,IACpB,OACI,6BACI,kBAACR,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAId,UAAU,kBACzB,yBAAKe,IAAKC,IAAUC,IAAI,kBAE5B,kBAAC,EAAD,MACA,qC,MCPG,SAASI,IACpB,OACI,6BACI,kBAACT,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAId,UAAU,mBACzB,yBAAKe,IAAKC,IAAUC,IAAI,kBAE5B,kBAAC,EAAD,MACA,qC,MCPG,SAASK,IACpB,OACI,6BACI,kBAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAId,UAAU,iBACzB,yBAAKe,IAAKC,IAAUC,IAAI,kBAE5B,kBAAC,EAAD,MACA,uC,MCQGM,MAbf,WACE,OACE,6BACE,kBAAC,IAAD,CAAeC,SAAS,YACtB,kBAAC,IAAD,CAAOnB,OAAK,EAACoB,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOc,KAAK,YAAYC,UAAWN,IACnC,kBAAC,IAAD,CAAOK,KAAK,aAAaC,UAAWL,IACpC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAWJ,OCHtBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.195ea48c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tapsco2-logo-w-glow.75de675a.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Container, AppBar, Button } from '@material-ui/core';\r\nimport './NavBar.css';\r\n\r\nexport default function NavBar() {\r\n    const navLinks = [\r\n        { 'title': 'Home', 'link': '/' },\r\n        { 'title': 'Services', 'link': '/services' },\r\n        { 'title': 'Equipment', 'link': '/equipment' },\r\n        { 'title': 'Contact Us', 'link': '/contact' }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <AppBar className=\"navRoot\">\r\n                <Container className=\"navContainer\">\r\n                    {navLinks.map((e, index) => (\r\n                        <NavLink exact className=\"navLink\" activeClassName=\"navActive\" to={e.link}>\r\n                            <Button className=\"navButton\">{e.title}</Button>\r\n                        </NavLink>\r\n                    ))}\r\n                </Container>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Grid, Container, Typography } from '@material-ui/core';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport tapsLogo from '../../imgs/tapsco2-logo-w-glow.png';\r\nimport './Home.css';\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            <Grid item xs={12} className=\"homeHeader\">\r\n                <img src={tapsLogo} alt=\"tapsco2 logo\" />\r\n            </Grid>\r\n            <NavBar />\r\n            <Container>\r\n                <Grid item xs={12} className=\"homeCTA\">\r\n                    <Typography variant=\"h2\">For the Perfect Blend</Typography>\r\n                    <Typography variant=\"h4\">We are your local source for Bulk CO2, Nitrogen Generators, Gas Blenders, Brew Gas and more!</Typography>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport tapsLogo from '../../imgs/tapsco2-logo-w-glow.png';\r\nimport './Services.css';\r\n\r\nexport default function Services() {\r\n    return (\r\n        <div>\r\n            <Grid item xs={12} className=\"servicesHeader\">\r\n                <img src={tapsLogo} alt=\"tapsco2 logo\" />\r\n            </Grid>\r\n            <NavBar />\r\n            <p>test3</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport tapsLogo from '../../imgs/tapsco2-logo-w-glow.png';\r\nimport './Equipment.css';\r\n\r\nexport default function Equipment() {\r\n    return (\r\n        <div>\r\n            <Grid item xs={12} className=\"equipmentHeader\">\r\n                <img src={tapsLogo} alt=\"tapsco2 logo\" />\r\n            </Grid>\r\n            <NavBar />\r\n            <p>test2</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport tapsLogo from '../../imgs/tapsco2-logo-w-glow.png';\r\nimport './Contact.css';\r\n\r\nexport default function Contact() {\r\n    return (\r\n        <div>\r\n            <Grid item xs={12} className=\"contactHeader\">\r\n                <img src={tapsLogo} alt=\"tapsco2 logo\" />\r\n            </Grid>\r\n            <NavBar />\r\n            <p>contact</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { BrowserRouter, Route, BrowserRouter as Router } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Services from './components/Services/Services';\nimport Equipment from './components/Equipment/Equipment';\nimport Contact from './components/Contact/Contact';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter basename=\"/tapsco2\">\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/services\" component={Services}/>\n        <Route path=\"/equipment\" component={Equipment}/>\n        <Route path=\"/contact\" component={Contact}/>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}